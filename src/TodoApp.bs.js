// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function valueFromEvent(evt) {
  return evt.target.value;
}

var component = ReasonReact.reducerComponent("Input");

function make(onSubmit, param) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var text = param[/* state */1];
              return React.createElement("input", {
                          placeholder: "Write something to do",
                          type: "text",
                          value: text,
                          onKeyDown: (function (evt) {
                              if (evt.key === "Enter") {
                                Curry._1(onSubmit, text);
                                return Curry._1(send, "");
                              } else {
                                return 0;
                              }
                            }),
                          onChange: (function (evt) {
                              return Curry._1(send, evt.target.value);
                            })
                        });
            }),
          /* initialState */(function (param) {
              return "";
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (newText, _text) {
              return /* Update */Block.__(0, [newText]);
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var Input = /* module */[
  /* component */component,
  /* make */make
];

var component$1 = ReasonReact.statelessComponent("Item");

function make$1(item, onToggle, children) {
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          className: "item"
                        }, React.createElement("input", {
                              checked: item[/* completed */1],
                              type: "checkbox",
                              onChange: (function (param) {
                                  return Curry._1(onToggle, item);
                                })
                            }), item[/* title */0]);
            }),
          /* initialState */component$1[/* initialState */10],
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */component$1[/* reducer */12],
          /* jsElementWrapped */component$1[/* jsElementWrapped */13]
        ];
}

var Item = /* module */[
  /* component */component$1,
  /* make */make$1
];

var component$2 = ReasonReact.statelessComponent("AddButton");

var AddButton = /* module */[/* component */component$2];

var component$3 = ReasonReact.reducerComponent("TodoApp");

function make$2(children) {
  return /* record */[
          /* debugName */component$3[/* debugName */0],
          /* reactClassInternal */component$3[/* reactClassInternal */1],
          /* handedOffState */component$3[/* handedOffState */2],
          /* willReceiveProps */component$3[/* willReceiveProps */3],
          /* didMount */component$3[/* didMount */4],
          /* didUpdate */component$3[/* didUpdate */5],
          /* willUnmount */component$3[/* willUnmount */6],
          /* willUpdate */component$3[/* willUpdate */7],
          /* shouldUpdate */component$3[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              return React.createElement("div", {
                          className: "app"
                        }, React.createElement("h1", undefined, "What to do?"), ReasonReact.element(undefined, undefined, make((function (text) {
                                    return Curry._1(send, /* Add */Block.__(1, [text]));
                                  }), /* array */[])), React.createElement("section", undefined, $$Array.of_list(List.map((function (item) {
                                        return ReasonReact.element(undefined, undefined, make$1(item, (function (param) {
                                                          return Curry._1(send, /* Toggle */Block.__(0, [item]));
                                                        }), /* array */[]));
                                      }), param[/* state */1][/* items */0]))));
            }),
          /* initialState */(function (param) {
              return /* record */[/* items : [] */0];
            }),
          /* retainedProps */component$3[/* retainedProps */11],
          /* reducer */(function (action, state) {
              switch (action.tag | 0) {
                case 0 : 
                    var todo = action[0];
                    return /* Update */Block.__(0, [/* record */[/* items */List.map((function (i) {
                                        var match = Caml_obj.caml_notequal(i, todo);
                                        if (match) {
                                          return i;
                                        } else {
                                          return /* record */[
                                                  /* title */todo[/* title */0],
                                                  /* completed */!todo[/* completed */1]
                                                ];
                                        }
                                      }), state[/* items */0])]]);
                case 1 : 
                    return /* Update */Block.__(0, [/* record */[/* items : :: */[
                                  /* record */[
                                    /* title */action[0],
                                    /* completed */false
                                  ],
                                  state[/* items */0]
                                ]]]);
                case 2 : 
                    var todo$1 = action[0];
                    return /* Update */Block.__(0, [/* record */[/* items */List.filter((function (t) {
                                          return Caml_obj.caml_notequal(t, todo$1);
                                        }))(state[/* items */0])]]);
                
              }
            }),
          /* jsElementWrapped */component$3[/* jsElementWrapped */13]
        ];
}

exports.valueFromEvent = valueFromEvent;
exports.Input = Input;
exports.Item = Item;
exports.AddButton = AddButton;
exports.component = component$3;
exports.make = make$2;
/* component Not a pure module */
